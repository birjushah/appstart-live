<script type="text/javascript">
window.documentUploaded = <?php echo $this->documentUploaded?$this->documentUploaded:0;?>;
window.documentLimit = <?php echo $this->documentlimit?$this->documentlimit:0;?>;
window.totalcategories = <?php echo $this->totalcategories?$this->totalcategories:0;?>;
</script>

<script type="text/javascript" src="<?php echo $this->baseUrl("libs/jqwidget/js/jqxcore.js"); ?>"></script>
<script type="text/javascript" src="<?php echo $this->baseUrl("libs/jqwidget/js/gettheme.js"); ?>"></script>
<script type="text/javascript" src="<?php echo $this->baseUrl("libs/jqwidget/js/jqxdropdownbutton.js"); ?>"></script>
<script type="text/javascript" src="<?php echo $this->baseUrl("libs/jqwidget/js/jqxscrollbar.js"); ?>"></script>
<script type="text/javascript" src="<?php echo $this->baseUrl("libs/jqwidget/js/jqxbuttons.js"); ?>"></script>
<script type="text/javascript" src="<?php echo $this->baseUrl("libs/jqwidget/js/jqxtree.js"); ?>"></script>
<script type="text/javascript" src="<?php echo $this->baseUrl("libs/jqwidget/js/jqxpanel.js"); ?>"></script>

<form id="frmFilter">
<div id="filterBox">
      <table style="width:100%;border:0;border-spacing:0;border-collapse:collapse;">
        <tr>
          <td valign="middle"><h2 class="filterIcon"><?php echo ($this->translate('Filter')); ?></h2></td>
          <td>
          	<table>
              <tr>
                <td><?php echo $this->translate('Title'); ?></td>
                <td><input type="text" class="input" id="txtTitle" name="dd[title]"></td>
                <td><?php echo $this->translate('Keywords'); ?></td>
                <td><input type="text" class="input" id="txtKeywords" name="dd[keywords]"></td>
                <td><?php echo $this->translate('Status'); ?></td>
                <td>
                	<select name="d[status]">
                		<option value="1"><?php echo $this->translate('Active'); ?></option>
                		<option value="0"><?php echo $this->translate('InActive'); ?></option>
                	</select>
               	</td>
              </tr>
            </table>
          </td>
          <td>&nbsp;</td>
          <td align="right">
          	<input type="submit" name="button" id="button" class="button" value="<?php echo ($this->translate('Submit'))?>">
          </td>
        </tr>
      </table>
</div>
</form>
<a class="togglefilter"></a>
<table style="border-spacing:0;border-collapse:collapse;width:100%" class="pattern-style-b" id="dataGrid">
	<thead>
		<tr>
	        <th scope="col"><?php echo $this->translate('Title'); ?></th>
            <th scope="col"><?php echo ($this->translate('Category')); ?></th>
		    <th scope="col"><?php echo ($this->translate('Type')); ?></th>
		    <th scope="col"><?php echo ($this->translate('Size (Bytes)')); ?></th>
		    <th scope="col"><?php echo ($this->translate('Keywords')); ?></th>
		    <th scope="col"><?php echo ($this->translate('Status')); ?></th>
		    <th scope="col"><?php echo ($this->translate('Order')); ?></th>
		    <th scope="col" class="action"><?php echo ($this->translate('Action')); ?></th>
		</tr>
    </thead> 
	<tbody>
		<tr>
			<td colspan="3" class="dataTables_empty"><?php echo ($this->translate('Loading data from server')); ?></td>
		</tr>
	</tbody>      
</table>

<div id="zip-import" style="display: none;">
<form id="frmZipImport" class="zend_form" name="frmZipImport" action="#" method="post">
<input type="hidden" name="module_document_category_id" id="module_document_category_id" value="0" />
<table width="100%">
	<tr>
		<td><label for="tree"><?php echo $this->translate('Select Category:'); ?></label></td>
		<td>
			<div id='jqxWidget'>
				<div id="dropDownButton">
					<div id='jqxTree'></div>
				</div>
			</div>
		</td>
	</tr>
	<tr>
		<td>Select File:</td>
		<td><input type="file" id="zipfile" name="zipfile" accept="application/zip" /> </td>
	</tr>
	<tr>
		<td></td>
		<td align="right"><input type="checkbox" id="chkOverwrite" name="chkOverwrite" checked="checked" value="1" /> <label for="chkOverwrite">Overwrite Existing</label></td>
	</tr>
	<tr>
		<td colspan="2">
		<div id="progressbar" style="display: none;">
			<div id="progress" class="progressbar-completed" style="width:0%;">
            	<div>&nbsp;</div>
        	</div>
        </div>
        </td>
	</tr>
	<tr>
		<td colspan="2"><input type="submit" name="submit" value="submit" /><div id="error-message" style="float: right;"></div></td>
	</tr>
</table>
</form>
</div>

<script type="text/javascript">
var grid ="";
$(document).ready(function() {
	$('a[href="<?php echo $this->addlink;?>"]').on('click',function(e){
		if(!e.isDefaultPrevented()){
			if(window.totalcategories == 0){
				 promptus = new prompt({
	                reference : self,
	                element : ".dataTables_wrapper"
	            });
	            promptus.showErrorMessage("You can not add a document without category.Please add atleast one category.");
	            setTimeout(function(){
            		promptus.close();
                }, 3000);
				e.preventDefault();
			}
		}
	});
	var parentIdLabel = "";
	var data = <?php echo $this->categoryTree; ?>;
	//console.log(data);
	//creating data which jqtree plugin can use
	var builddata = function () {
		var source = [];
		var items = [];	
		// build hierarchical source.
		items[0]={id:0,label:'Menu',selected:false};
		source[0] = items[0];
		for (var i = 0; i < data.length; i++) {
			var item = data[i];
			var label = item["text"];
			var parentid = item["parentId"];
			var id = item["id"];

			if (items[parentid]) {
				var item = { id: id, label: label, item: item };
				if (!items[parentid].items) {
					items[parentid].items = [];
				}
				items[parentid].items[items[parentid].items.length] = item;
				items[id] = item;
			}
			else {
				items[id] = { id: id, label: label, item: item };
				source[id] = items[id];
			}
		}		
		return source;
	}
	$("#dropDownButton").jqxDropDownButton({ width: 150, height: 25 });
	$('#jqxTree').bind('initialized', function (event) { 
		var args = event.args;
		parentIdLabel = (parentIdLabel=="")?"Menu":parentIdLabel;
    	var dropDownContent = '<div style="position: relative; margin-left: 3px; margin-top: 5px;">' + parentIdLabel + '</div>';
    	$("#dropDownButton").jqxDropDownButton('setContent', dropDownContent);
    });	
	$('#jqxTree').bind('select', function (event) {
        var args = event.args;
        var item = $('#jqxTree').jqxTree('getItem', args.element);
        $("#module_document_category_id").attr("value",item.id);
        var dropDownContent = '<div style="position: relative; margin-left: 3px; margin-top: 5px;">' + item.label + '</div>';
        $("#dropDownButton").jqxDropDownButton('setContent', dropDownContent);
    });
	$('#jqxTree').bind('click', function (event) {
		$("#dropDownButton").jqxDropDownButton("close");
	});
    var source = builddata();
    //console.log(source);
	$("#jqxTree").jqxTree({source:source,width: 250 });
	
	$("#hrefImport").on('click',function(e){
		$("#zip-import").dialog({
    		modal: true,
    		width: 330,
    		resizable: false,
    		title: "Import ZIP",
    		dialogClass: "Import"
    	});
	});
	$("#frmZipImport").on('submit',function(e){
		if(!e.isDefaultPrevented()){
			$("#error-message").html("");
			e.preventDefault();
			var filename = $("#zipfile").val();
			if(filename.length == 0) {
				$("#error-message").html("Please upload file !!!");
				$("#error-message").css("color","#f00");
				return;
			}
			var ext = filename.substring(filename.lastIndexOf('.') + 1);
			if(ext.toLowerCase() != 'zip') {
				$("#error-message").html("Only zip files are allowed to upload !!!");
				$("#error-message").css("color","#f00");
				return;
			}
			
			$(document).queue(function(next){
				$("#progressbar").show();
				next();
			}).queue(function(next){
				$.ajaxFileUpload({
					url:'<?php echo $this->url(array("module"=>"document","controller"=>"index","action"=>"zip-import")); ?>',
					secureuri:false,
					fileElementId:'zipfile',
					dataType: 'json',
					data:{upload:'true',category:$("#module_document_category_id").attr("value"),overwrite:($('#chkOverwrite').is(':checked')? 1 : 0)},
					success: function (data, status)
					{
						if(data.success != undefined) {
							$("#error-message").html("<?php echo $this->translate('Documents imported successfully.')?>");
							$("#error-message").css("color","#080");
							setTimeout(function(){
								location.href=location.href;
								next();
							}, 3000);
						}
					},
					error: function (data, status, e)
					{
						$("#error-message").html("<?php echo $this->translate('Error uploading zip.')?>");
						$("#error-message").css("color","#f00");
						next();
					}
				});
			}).queue(function(next){
				$("#progressbar").hide();
				next();
	  		});
		}
	});
	$('a[href="<?php echo $this->addlink;?>"]').on('click',function(e){
		if(!e.isDefaultPrevented()){
			if(window.documentUploaded >= window.documentLimit){
				 promptus = new prompt({
	                reference : self,
	                element : ".dataTables_wrapper"
	            });
	            promptus.showErrorMessage("You have reached maximum upload document limit of " +window.documentLimit+ ".Please delete some documents and try again");
	            setTimeout(function(){
            		promptus.close();
                }, 3000);
				e.preventDefault();
			}
		}
	});
	grid = dataTable({
		aaSorting: [[ 6, "desc" ]],
		"aoColumns": [
						{ "sName": "dd.title" },
                        { "sName": "mdcd.title" },
						{ "sName": "dd.type" },
						{ "sName": "dd.size" },
						{ "sName": "dd.keywords" },
						{ "sName": "d.status" },
						{ "sName": "d.order" },
						{ "sName": "actions","bSortable": false}
					 ],
		id : $('#dataGrid'),
		filterForm : $('#frmFilter'),
		charLimit : [20,0,0,25,0],
		sAjaxSource: "<?php echo $this->url(array("module"=>"document","controller"=>"index","action"=>"grid"));?>"
	});
    $(document).on("submit","#frmFilter",function(){
    	grid.fnDraw();
    	return false;
    });
    
    $(document).on("click",".grid_delete",function(e){
        var self = this;
        window.currentDeleteUrl = $(this).attr("href"); 
        if(!e.isDefaultPrevented()){
        	var promptus = new prompt({
                    	reference : self,
                        element : ".dataTables_wrapper",
                        message : "<?php echo ($this->translate('Are you sure you want to delete this document?')); ?>",
                        buttons : {
                            "Yes" : function(self){
                                var prompt = this;
                                $(document).queue(function(next){
                                    prompt.showLoadingMessage("<?php echo ($this->translate('Please wait while deleting document..')); ?>");
                                    next();
                                }).queue(function(next){
                                    $.ajax({
                                        url: window.currentDeleteUrl,
                                        cache: false,
                                        type: "GET",
                                        dataType: "json",
                                        success: function(json){
                                            if(json.success != undefined){ 
                                            	window.documentUploaded--;
                                            	prompt.showSuccessMessage("<?php echo ($this->translate('Document deleted successfully.')); ?>");
                                            	setTimeout(function(){
                                            		prompt.close();
                                                	grid.fnDraw();
                                                }, 1000);
                                            } else if(json.errors != undefined){
                                                var errorMessage = "<?php echo ($this->translate('Unable to delete document:')); ?><br />";
                                                errorMessage += json.errors.message;
                                            	prompt.showErrorMessage(errorMessage);
                                            	setTimeout(function(){
                                            		prompt.close();
                                                }, 2000);
                                            }
                                        },
                                        error: function(){
                                        }
                                    }).complete(next); 
                                });
                            },
                            "No"  : function(self){
                            	this.close();
                            },
                        }
                    });
            e.preventDefault();
        }
    });

    $(document).on("click",".module_publish",function(e){
        var self = this;
        window.currentPublishUrl = $(this).attr("href"); 
        if(!e.isDefaultPrevented()){
        	var promptus = new prompt({
                    	reference : self,
                        element : ".dataTables_wrapper",
                        message : "<?php echo $this->translate('Are you sure you want to publish this Module?'); ?>",
                        buttons : {
                            "Yes" : function(self){
                                var prompt = this;
                                $(document).queue(function(next){
                                    prompt.showLoadingMessage("<?php echo $this->translate('Publishing Module..'); ?>");
                                    next();
                                }).queue(function(next){
                                    $.ajax({
                                        url: window.currentPublishUrl,
                                        cache: false,
                                        type: "GET",
                                        dataType: "json",
                                        success: function(json){
                                            if(json.success != undefined){ 
                                            	prompt.showSuccessMessage("<?php echo $this->translate('Module Published successfully.'); ?>");
                                            	setTimeout(function(){
                                            		prompt.close();
                                                	grid.fnDraw();
                                                }, 1000);
                                            } else if(json.errors != undefined){
                                                var errorMessage = "<?php echo $this->translate('Unable to publish Module:'); ?><br />";
                                                errorMessage += json.errors.message;
                                            	prompt.showErrorMessage(errorMessage);
                                            	setTimeout(function(){
                                            		prompt.close();
                                                }, 2000);
                                            }
                                        },
                                        error: function(){
                                        }
                                    }).complete(next); 
                                });
                            },
                            "No"  : function(self){
                            	this.close();
                            },
                        }
                    });
            e.preventDefault();
        }
    });
    
    $('.togglefilter').on("click",function(){
		$('#filterBox').toggle();
		$('#content > a').toggleClass('flip-vertical');
	});
	$('#filterBox').hide();
});
</script>